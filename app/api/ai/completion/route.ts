import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    // Parse request body
    let body
    try {
      body = await request.json()
    } catch (parseError) {
      console.error("Request body parse error:", parseError)
      return NextResponse.json({ error: "Invalid request body. Expected JSON." }, { status: 400 })
    }

    const { prompt, context } = body

    // Check if API key is configured
    if (!process.env.OPENAI_API_KEY) {
      console.error("OpenAI API key not configured")
      return NextResponse.json(
        {
          error: "OpenAI API key not configured. Please add OPENAI_API_KEY to your environment variables.",
        },
        { status: 500 },
      )
    }

    // Make direct API call to OpenAI without the SDK
    const openaiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content:
              "You are a helpful writing assistant. Continue the text naturally and coherently. Keep the same tone and style. Provide only the continuation, not the original text.",
          },
          {
            role: "user",
            content: `Continue this text: "${context}${prompt}"`,
          },
        ],
        max_tokens: 150,
        temperature: 0.7,
        stream: false,
      }),
    })

    const responseText = await openaiResponse.text()
    console.log("OpenAI raw response:", responseText)

    let completion
    try {
      completion = JSON.parse(responseText)
    } catch (parseError) {
      console.error("OpenAI response parse error:", parseError)
      return NextResponse.json(
        {
          error: "Invalid response from OpenAI API",
          details: responseText.substring(0, 200),
        },
        { status: 500 },
      )
    }

    if (!openaiResponse.ok) {
      console.error("OpenAI API error:", completion)

      // Handle specific OpenAI errors
      if (openaiResponse.status === 401) {
        return NextResponse.json(
          { error: "Invalid OpenAI API key. Please check your OPENAI_API_KEY environment variable." },
          { status: 401 },
        )
      }

      if (openaiResponse.status === 429) {
        return NextResponse.json({ error: "OpenAI API quota exceeded. Please check your billing." }, { status: 429 })
      }

      if (openaiResponse.status === 400) {
        return NextResponse.json(
          { error: `OpenAI API validation error: ${completion.error?.message || "Bad request"}` },
          { status: 400 },
        )
      }

      return NextResponse.json(
        {
          error: `OpenAI API error (${openaiResponse.status}): ${completion.error?.message || "Unknown error"}`,
        },
        { status: openaiResponse.status },
      )
    }

    // Extract suggestion from response
    const suggestion = completion.choices?.[0]?.message?.content?.trim() || ""

    if (!suggestion) {
      console.error("No completion generated by AI:", completion)
      return NextResponse.json({ error: "No completion generated by AI" }, { status: 500 })
    }

    console.log("AI completion successful:", suggestion.substring(0, 100) + "...")
    return NextResponse.json({ suggestion })
  } catch (error: any) {
    console.error("Unexpected error in AI completion:", error)

    // Handle network errors
    if (error.name === "TypeError" && error.message.includes("fetch")) {
      return NextResponse.json(
        {
          error: "Network error: Unable to connect to OpenAI API. Please check your internet connection.",
        },
        { status: 503 },
      )
    }

    return NextResponse.json(
      {
        error: `Server error: ${error?.message || "Unknown error occurred"}`,
      },
      { status: 500 },
    )
  }
}
